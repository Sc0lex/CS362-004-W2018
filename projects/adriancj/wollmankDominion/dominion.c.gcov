        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1://Kyle Wollman's refactored version of dominion.c
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
function compare called 1419 returned 100% blocks executed 100%
     1419:   10:int compare(const void* a, const void* b) {
     1419:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      108:   12:    return 1;
     1311:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      323:   14:    return -1;
      988:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 30 returned 100% blocks executed 98%
       30:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       30:   46:  SelectStream(1);
call    0 returned 100%
       30:   47:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:  
        -:   49:  //check number of players
       30:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:   51:    {
        4:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       26:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      276:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:    {
     2758:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:        {
     2508:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   64:	    {
        1:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       25:   75:  if (numPlayers == 2)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:   76:    {
       13:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
       12:   79:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   80:    {
        6:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
        6:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       25:   89:  if (numPlayers == 2)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:   90:    {
       13:   91:      state->supplyCount[estate] = 8;
       13:   92:      state->supplyCount[duchy] = 8;
       13:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
       12:   97:      state->supplyCount[estate] = 12;
       12:   98:      state->supplyCount[duchy] = 12;
       12:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       25:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       25:  104:  state->supplyCount[silver] = 40;
       25:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      525:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  109:    {
     4125:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  111:	{
     3875:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      250:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
        -:  116:		{
       78:  117:		  if (numPlayers == 2){ 
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
       21:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
       18:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      211:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      250:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     3625:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       93:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  141:    {
       68:  142:      state->deckCount[i] = 0;
      272:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:	{
      204:  145:	  state->deck[i][j] = estate;
      204:  146:	  state->deckCount[i]++;
        -:  147:	}
      544:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:	{
      476:  150:	  state->deck[i][j] = copper;
      476:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       93:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  157:    {
       68:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       93:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       68:  168:      state->handCount[i] = 0;
       68:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      700:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
      675:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       25:  184:  state->outpostPlayed = 0;
       25:  185:  state->phase = 0;
       25:  186:  state->numActions = 1;
       25:  187:  state->numBuys = 1;
       25:  188:  state->playedCardCount = 0;
       25:  189:  state->whoseTurn = 0;
       25:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
      150:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      125:  195:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:  }
        -:  197:
       25:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
       25:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 95 returned 100% blocks executed 94%
       95:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       95:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       95:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:    return -1;
       95:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     1095:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 10% (fallthrough)
      905:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      905:  218:    newDeck[newDeckPos] = state->deck[player][card];
      905:  219:    newDeckPos++;
     2890:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
     1985:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      905:  223:    state->deckCount[player]--;
        -:  224:  }
     1000:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 10% (fallthrough)
      905:  226:    state->deck[player][i] = newDeck[i];
      905:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       95:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 4 returned 100% blocks executed 73%
        4:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
        4:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
        4:  239:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
        4:  245:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
        4:  251:  card = handCard(handPos, state);
call    0 returned 100%
        -:  252:	
        -:  253:  //check if selected card is an action
        4:  254:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
        4:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
        4:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
        4:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  270:	
        4:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 190 returned 100% blocks executed 100%
      190:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
      190:  282:  who = state->whoseTurn;
        -:  283:
      190:  284:  if (state->numBuys < 1){
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
       27:  287:    return -1;
      163:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
       60:  291:    return -1;
      103:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       17:  295:    return -1;
        -:  296:  } else {
       86:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
       86:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  300:  
       86:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       86:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
       86:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 4 returned 100% blocks executed 100%
        4:  317:int handCard(int handPos, struct gameState *state) {
        4:  318:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 249 returned 100% blocks executed 100%
      249:  322:int supplyCount(int card, struct gameState *state) {
      249:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 270000 returned 100% blocks executed 100%
   270000:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
   270000:  328:  int count = 0;
        -:  329:
 67198815:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  331:    {
 66928815:  332:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  333:    }
        -:  334:
 67703499:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  336:    {
 67433499:  337:      if (state->hand[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  338:    }
        -:  339:
 67978224:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  341:    {
 67708224:  342:      if (state->discard[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  343:    }
        -:  344:
   270000:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 8 returned 100% blocks executed 100%
        8:  348:int whoseTurn(struct gameState *state) {
        8:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 134 returned 100% blocks executed 38%
      134:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      134:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
      134:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      134:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      134:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      134:  578:    state->deckCount[player]--;
      134:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
      134:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 465 returned 100% blocks executed 97%
      465:  585:int getCost(int cardNumber)
        -:  586:{
      465:  587:  switch( cardNumber ) 
branch  0 taken 5%
branch  1 taken 5%
branch  2 taken 5%
branch  3 taken 5%
branch  4 taken 6%
branch  5 taken 5%
branch  6 taken 5%
branch  7 taken 2%
branch  8 taken 5%
branch  9 taken 5%
branch 10 taken 5%
branch 11 taken 2%
branch 12 taken 2%
branch 13 taken 5%
branch 14 taken 5%
branch 15 taken 2%
branch 16 taken 5%
branch 17 taken 2%
branch 18 taken 2%
branch 19 taken 5%
branch 20 taken 5%
branch 21 taken 2%
branch 22 taken 5%
branch 23 taken 2%
branch 24 taken 5%
branch 25 taken 2%
branch 26 taken 2%
branch 27 taken 0%
        -:  588:    {
        -:  589:    case curse:
       23:  590:      return 0;
        -:  591:    case estate:
       23:  592:      return 2;
        -:  593:    case duchy:
       23:  594:      return 5;
        -:  595:    case province:
       23:  596:      return 8;
        -:  597:    case copper:
       27:  598:      return 0;
        -:  599:    case silver:
       23:  600:      return 3;
        -:  601:    case gold:
       23:  602:      return 6;
        -:  603:    case adventurer:
        7:  604:      return 6;
        -:  605:    case council_room:
       23:  606:      return 5;
        -:  607:    case feast:
       23:  608:      return 4;
        -:  609:    case gardens:
       23:  610:      return 4;
        -:  611:    case mine:
        7:  612:      return 5;
        -:  613:    case remodel:
        7:  614:      return 4;
        -:  615:    case smithy:
       23:  616:      return 4;
        -:  617:    case village:
       23:  618:      return 3;
        -:  619:    case baron:
        7:  620:      return 4;
        -:  621:    case great_hall:
       23:  622:      return 3;
        -:  623:    case minion:
        7:  624:      return 5;
        -:  625:    case steward:
        7:  626:      return 3;
        -:  627:    case tribute:
       23:  628:      return 5;
        -:  629:    case ambassador:
       23:  630:      return 3;
        -:  631:    case cutpurse:
        7:  632:      return 4;
        -:  633:    case embargo: 
       23:  634:      return 2;
        -:  635:    case outpost:
        7:  636:      return 5;
        -:  637:    case salvager:
       23:  638:      return 4;
        -:  639:    case sea_hag:
        7:  640:      return 4;
        -:  641:    case treasure_map:
        7:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 4 returned 100% blocks executed 8%
        4:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        4:  655:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        4:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        4:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
        4:  662:  int z = 0;// this is the counter for the temp hand
        4:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
        4:  669:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  670:    {
        -:  671:    case adventurer:
        1:  672:      adventurerFunc(drawntreasure, currentPlayer, z, temphand, state);
call    0 returned 100%
        1:  673:      return 0;
        -:  674:			
        -:  675:    case council_room:
    #####:  676:	  council_roomFunc(currentPlayer, state, handPos);	
call    0 never executed
    #####:  677:	  return 0;
        -:  678:			
        -:  679:    case feast:
        -:  680:      //gain card with cost up to 5
        -:  681:      //Backup hand
    #####:  682:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  683:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  684:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  685:      }
        -:  686:      //Backup hand
        -:  687:
        -:  688:      //Update Coins for Buy
    #####:  689:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  690:      x = 1;//Condition to loop on
    #####:  691:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  692:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  693:	  if (DEBUG)
        -:  694:	    printf("None of that card left, sorry!\n");
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  698:	  }
        -:  699:	}
    #####:  700:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  701:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  702:
        -:  703:	  if (DEBUG){
        -:  704:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  705:	  }
        -:  706:	}
        -:  707:	else{
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
    #####:  713:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  714:	  x = 0;//No more buying cards
        -:  715:
        -:  716:	  if (DEBUG){
        -:  717:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  718:	  }
        -:  719:
        -:  720:	}
        -:  721:      }     
        -:  722:
        -:  723:      //Reset Hand
    #####:  724:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  725:	state->hand[currentPlayer][i] = temphand[i];
    #####:  726:	temphand[i] = -1;
        -:  727:      }
        -:  728:      //Reset Hand
        -:  729:      			
    #####:  730:      return 0;
        -:  731:			
        -:  732:    case gardens:
    #####:  733:      return -1;
        -:  734:			
        -:  735:    case mine:
    #####:  736:      mineFunc(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  737:			
    #####:  738:      return 0;
        -:  739:			
        -:  740:    case remodel:
    #####:  741:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  742:
    #####:  743:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
    #####:  748:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  749:
        -:  750:      //discard card from hand
    #####:  751:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  752:
        -:  753:      //discard trashed card
    #####:  754:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  755:	{
    #####:  756:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  757:	    {
    #####:  758:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  759:	      break;
        -:  760:	    }
        -:  761:	}
        -:  762:
        -:  763:
    #####:  764:      return 0;
        -:  765:		
        -:  766:    case smithy:
        1:  767:      smithyFunc(currentPlayer, handPos, state);
call    0 returned 100%
        1:  768:      return 0;
        -:  769:		
        -:  770:    case village:
        -:  771:      //+1 Card
        1:  772:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  773:			
        -:  774:      //+2 Actions
        1:  775:      state->numActions = state->numActions + 2;
        -:  776:			
        -:  777:      //discard played card from hand
        1:  778:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  779:      return 0;
        -:  780:		
        -:  781:    case baron:
    #####:  782:      state->numBuys++;//Increase buys by 1!
    #####:  783:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  784:	int p = 0;//Iterator for hand!
    #####:  785:	int card_not_discarded = 1;//Flag for discard set!
    #####:  786:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  787:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  788:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  789:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  790:	    state->discardCount[currentPlayer]++;
    #####:  791:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  792:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  793:	    }
    #####:  794:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  795:	    state->handCount[currentPlayer]--;
    #####:  796:	    card_not_discarded = 0;//Exit the loop
        -:  797:	  }
    #####:  798:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  799:	    if(DEBUG) {
        -:  800:	      printf("No estate cards in your hand, invalid choice\n");
        -:  801:	      printf("Must gain an estate if there are any\n");
        -:  802:	    }
    #####:  803:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  804:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  805:	      state->supplyCount[estate]--;//Decrement estates
    #####:  806:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:		isGameOver(state);
call    0 never executed
        -:  808:	      }
        -:  809:	    }
    #####:  810:	    card_not_discarded = 0;//Exit the loop
        -:  811:	  }
        -:  812:			    
        -:  813:	  else{
    #####:  814:	    p++;//Next card
        -:  815:	  }
        -:  816:	}
        -:  817:      }
        -:  818:			    
        -:  819:      else{
    #####:  820:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  821:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  822:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  823:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  824:	    isGameOver(state);
call    0 never executed
        -:  825:	  }
        -:  826:	}
        -:  827:      }
        -:  828:	    
        -:  829:      
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case great_hall:
        -:  833:      //+1 Card
        1:  834:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  835:			
        -:  836:      //+1 Actions
        1:  837:      state->numActions++;
        -:  838:			
        -:  839:      //discard card from hand
        1:  840:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  841:      return 0;
        -:  842:		
        -:  843:    case minion:
    #####:  844:      minionFunc(state, handPos, currentPlayer, choice1, choice2);
call    0 never executed
    #####:  845:      return 0;
        -:  846:		
        -:  847:    case steward:
    #####:  848:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  849:	{
        -:  850:	  //+2 cards
    #####:  851:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  852:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  853:	}
    #####:  854:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  855:	{
        -:  856:	  //+2 coins
    #####:  857:	  state->coins = state->coins + 2;
        -:  858:	}
        -:  859:      else
        -:  860:	{
        -:  861:	  //trash 2 cards in hand
    #####:  862:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  863:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  864:	}
        -:  865:			
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  868:      return 0;
        -:  869:		
        -:  870:    case tribute:
    #####:  871:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  872:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  873:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  874:	  state->deckCount[nextPlayer]--;
        -:  875:	}
    #####:  876:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  877:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  878:	  state->discardCount[nextPlayer]--;
        -:  879:	}
        -:  880:	else{
        -:  881:	  //No Card to Reveal
        -:  882:	  if (DEBUG){
        -:  883:	    printf("No cards to reveal\n");
        -:  884:	  }
        -:  885:	}
        -:  886:      }
        -:  887:	    
        -:  888:      else{
    #####:  889:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  890:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  891:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  892:	    state->deckCount[nextPlayer]++;
    #####:  893:	    state->discard[nextPlayer][i] = -1;
    #####:  894:	    state->discardCount[nextPlayer]--;
        -:  895:	  }
        -:  896:			    
    #####:  897:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  898:	} 
    #####:  899:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  900:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  901:	state->deckCount[nextPlayer]--;
    #####:  902:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  903:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  904:	state->deckCount[nextPlayer]--;
        -:  905:      }    
        -:  906:		       
    #####:  907:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  908:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  909:	state->playedCardCount++;
    #####:  910:	tributeRevealedCards[1] = -1;
        -:  911:      }
        -:  912:
    #####:  913:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  914:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  915:	  state->coins += 2;
        -:  916:	}
        -:  917:		    
    #####:  918:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
        -:  922:	else{//Action Card
    #####:  923:	  state->numActions = state->numActions + 2;
        -:  924:	}
        -:  925:      }
        -:  926:	    
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case ambassador:
    #####:  930:      j = 0;		//used to check if player has enough cards to discard
        -:  931:
    #####:  932:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  933:	{
    #####:  934:	  return -1;				
        -:  935:	}
        -:  936:
    #####:  937:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  return -1;
        -:  940:	}
        -:  941:
    #####:  942:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  943:	{
    #####:  944:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  945:	    {
    #####:  946:	      j++;
        -:  947:	    }
        -:  948:	}
    #####:  949:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  950:	{
    #####:  951:	  return -1;				
        -:  952:	}
        -:  953:
        -:  954:      if (DEBUG) 
        -:  955:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  956:
        -:  957:      //increase supply count for choosen card by amount being discarded
    #####:  958:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  959:			
        -:  960:      //each other player gains a copy of revealed card
    #####:  961:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  964:	    {
    #####:  965:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  966:	    }
        -:  967:	}
        -:  968:
        -:  969:      //discard played card from hand
    #####:  970:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  971:
        -:  972:      //trash copies of cards returned to supply
    #####:  973:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  974:	{
    #####:  975:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  978:		{
    #####:  979:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  980:		  break;
        -:  981:		}
        -:  982:	    }
        -:  983:	}			
        -:  984:
    #####:  985:      return 0;
        -:  986:		
        -:  987:    case cutpurse:
        -:  988:
    #####:  989:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  990:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  995:		{
    #####:  996:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  997:		    {
    #####:  998:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  999:		      break;
        -: 1000:		    }
    #####: 1001:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1002:		    {
    #####: 1003:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1004:			{
        -: 1005:			  if (DEBUG)
        -: 1006:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1007:			}	
    #####: 1008:		      break;
        -: 1009:		    }		
        -: 1010:		}
        -: 1011:					
        -: 1012:	    }
        -: 1013:				
        -: 1014:	}				
        -: 1015:
        -: 1016:      //discard played card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1018:
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:		
        -: 1022:    case embargo: 
        -: 1023:      //+2 Coins
    #####: 1024:      state->coins = state->coins + 2;
        -: 1025:			
        -: 1026:      //see if selected pile is in play
    #####: 1027:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1028:	{
    #####: 1029:	  return -1;
        -: 1030:	}
        -: 1031:			
        -: 1032:      //add embargo token to selected supply pile
    #####: 1033:      state->embargoTokens[choice1]++;
        -: 1034:			
        -: 1035:      //trash card
    #####: 1036:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1037:      return 0;
        -: 1038:		
        -: 1039:    case outpost:
        -: 1040:      //set outpost flag
    #####: 1041:      state->outpostPlayed++;
        -: 1042:			
        -: 1043:      //discard card
    #####: 1044:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1045:      return 0;
        -: 1046:		
        -: 1047:    case salvager:
        -: 1048:      //+1 buy
    #####: 1049:      state->numBuys++;
        -: 1050:			
    #####: 1051:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1052:	{
        -: 1053:	  //gain coins equal to trashed card
    #####: 1054:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1055:	  //trash card
    #####: 1056:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1057:	}
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case sea_hag:
    #####: 1064:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1065:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1066:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 1067:	  state->deckCount[i]--;
    #####: 1068:	  state->discardCount[i]++;
    #####: 1069:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1070:	}
        -: 1071:      }
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case treasure_map:
        -: 1075:      //search hand for another treasure_map
    #####: 1076:      index = -1;
    #####: 1077:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1080:	    {
    #####: 1081:	      index = i;
    #####: 1082:	      break;
        -: 1083:	    }
        -: 1084:	}
    #####: 1085:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
        -: 1087:	  //trash both treasure cards
    #####: 1088:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1089:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1090:
        -: 1091:	  //gain 4 Gold cards
    #####: 1092:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1093:	    {
    #####: 1094:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1095:	    }
        -: 1096:				
        -: 1097:	  //return success
    #####: 1098:	  return 1;
        -: 1099:	}
        -: 1100:			
        -: 1101:      //no second treasure_map found in hand
    #####: 1102:      return -1;
        -: 1103:    }
        -: 1104:	
    #####: 1105:  return -1;
        -: 1106:}
        -: 1107:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1108:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1109:{
        -: 1110:	
        -: 1111:  //if card is not trashed, added to Played pile 
        3: 1112:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1113:    {
        -: 1114:      //add card to played pile
        2: 1115:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1116:      state->playedCardCount++;
        -: 1117:    }
        -: 1118:	
        -: 1119:  //set played card to -1
        3: 1120:  state->hand[currentPlayer][handPos] = -1;
        -: 1121:	
        -: 1122:  //remove card from player's hand
        3: 1123:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1124:    {
        -: 1125:      //reduce number of cards in hand
    #####: 1126:      state->handCount[currentPlayer]--;
        -: 1127:    }
        3: 1128:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1129:    {
        -: 1130:      //reduce number of cards in hand
    #####: 1131:      state->handCount[currentPlayer]--;
        -: 1132:    }
        -: 1133:  else 	
        -: 1134:    {
        -: 1135:      //replace discarded card with last card in hand
        3: 1136:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1137:      //set last card to -1
        3: 1138:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1139:      //reduce number of cards in hand
        3: 1140:      state->handCount[currentPlayer]--;
        -: 1141:    }
        -: 1142:	
        3: 1143:  return 0;
        -: 1144:}
        -: 1145:
function gainCard called 86 returned 100% blocks executed 70%
       86: 1146:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1147:{
        -: 1148:  //Note: supplyPos is enum of choosen card
        -: 1149:	
        -: 1150:  //check if supply pile is empty (0) or card is not used in game (-1)
       86: 1151:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1152:    {
    #####: 1153:      return -1;
        -: 1154:    }
        -: 1155:	
        -: 1156:  //added card for [whoseTurn] current player:
        -: 1157:  // toFlag = 0 : add to discard
        -: 1158:  // toFlag = 1 : add to deck
        -: 1159:  // toFlag = 2 : add to hand
        -: 1160:
       86: 1161:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1162:    {
    #####: 1163:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1164:      state->deckCount[player]++;
        -: 1165:    }
       86: 1166:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1167:    {
    #####: 1168:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1169:      state->handCount[player]++;
        -: 1170:    }
        -: 1171:  else
        -: 1172:    {
       86: 1173:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       86: 1174:      state->discardCount[player]++;
        -: 1175:    }
        -: 1176:	
        -: 1177:  //decrease number in supply pile
       86: 1178:  state->supplyCount[supplyPos]--;
        -: 1179:	 
       86: 1180:  return 0;
        -: 1181:}
        -: 1182:
function updateCoins called 29 returned 100% blocks executed 91%
       29: 1183:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1184:{
        -: 1185:  int i;
        -: 1186:	
        -: 1187:  //reset coin count
       29: 1188:  state->coins = 0;
        -: 1189:
        -: 1190:  //add coins for each Treasure card in player's hand
      180: 1191:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1192:    {
      151: 1193:      if (state->hand[player][i] == copper)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -: 1194:	{
      116: 1195:	  state->coins += 1;
        -: 1196:	}
       35: 1197:      else if (state->hand[player][i] == silver)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1198:	{
        1: 1199:	  state->coins += 2;
        -: 1200:	}
       34: 1201:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1202:	{
    #####: 1203:	  state->coins += 3;
        -: 1204:	}	
        -: 1205:    }	
        -: 1206:
        -: 1207:  //add bonus
       29: 1208:  state->coins += bonus;
        -: 1209:
       29: 1210:  return 0;
        -: 1211:}
        -: 1212:
function adventurerFunc called 1 returned 100% blocks executed 93%
        1: 1213:void adventurerFunc(int drawntreasure, int currentPlayer, int z, int temphand[], struct gameState *state)
        -: 1214:{
        6: 1215:	while(drawntreasure<2){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4: 1216:	if (state->deckCount[currentPlayer] < 0){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1217:	  shuffle(currentPlayer, state);
call    0 never executed
        -: 1218:	}
        4: 1219:	drawCard(currentPlayer, state);
call    0 returned 100%
        4: 1220:	int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        4: 1221:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2: 1222:	  drawntreasure++;
        -: 1223:	else{
        2: 1224:	  temphand[z]=cardDrawn;
        -: 1225:	  state->handCount[currentPlayer]; //this should just remove the top card (the most recently drawn one).
        2: 1226:	  z++;
        -: 1227:	}
        -: 1228:      }
        4: 1229:      while(z-1>=0){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2: 1230:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2: 1231:	z=z-1;
        -: 1232:      }
        -: 1233:      
        1: 1234:}
        -: 1235:
function smithyFunc called 1 returned 100% blocks executed 100%
        1: 1236:void smithyFunc(int currentPlayer, int handPos, struct gameState *state){
        -: 1237:	//+3 Cards
        -: 1238:	int i;
        4: 1239:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1240:	{
        3: 1241:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1242:	}
        -: 1243:			
        -: 1244:      //discard card from hand
        1: 1245:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        1: 1246:}
        -: 1247:
function council_roomFunc called 0 returned 0% blocks executed 0%
    #####: 1248:void council_roomFunc(int currentPlayer, struct gameState *state, int handPos){
        -: 1249:	//+4 Cards
        -: 1250:	int i;
    #####: 1251:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1252:	{
    #####: 1253:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1254:	}
        -: 1255:			
        -: 1256:      //+1 Buy
    #####: 1257:      state->numBuys--;
        -: 1258:			
        -: 1259:      //Each other player draws a card
    #####: 1260:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:	{
    #####: 1262:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1263:	    {
    #####: 1264:	      drawCard(i, state);
call    0 never executed
        -: 1265:	    }
        -: 1266:	}
        -: 1267:			
        -: 1268:      //put played card in played card pile
    #####: 1269:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1270:}
        -: 1271:
function mineFunc called 0 returned 0% blocks executed 0%
    #####: 1272:void mineFunc(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
        -: 1273:	int i;
    #####: 1274:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1275:
    #####: 1276:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1277:	{
    #####: 1278:	  return -1;
        -: 1279:	}
        -: 1280:		
    #####: 1281:    else if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1282:	{
    #####: 1283:	  return -1;
        -: 1284:	}
        -: 1285:
    #####: 1286:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1287:	{
    #####: 1288:	  return -1;
        -: 1289:	}
        -: 1290:
    #####: 1291:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1292:
        -: 1293:      //discard card from hand
    #####: 1294:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1295:
        -: 1296:      //discard trashed card
    #####: 1297:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1298:	{
    #####: 1299:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1300:	    {
    #####: 1301:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
        -: 1302:	      
        -: 1303:	    }
        -: 1304:	}
        -: 1305:}
        -: 1306:
function minionFunc called 0 returned 0% blocks executed 0%
    #####: 1307:void minionFunc(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -: 1308:	int i, j;
        -: 1309:	//+1 action
    #####: 1310:      state->numActions++;
        -: 1311:			
        -: 1312:      //discard card from hand
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1314:			
    #####: 1315:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1316:	{
    #####: 1317:	  state->coins = state->coins + 2;
        -: 1318:	}
        -: 1319:			
    #####: 1320:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1321:	{
        -: 1322:	  //discard hand
    #####: 1323:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1324:	    {
    #####: 1325:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1326:	    }
        -: 1327:				
        -: 1328:	  //draw 4
    #####: 1329:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1330:	    {
    #####: 1331:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1332:	    }
        -: 1333:				
        -: 1334:	  //other players discard hand and redraw if hand size > 4
    #####: 1335:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1336:	    {
    #####: 1337:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1338:		{
    #####: 1339:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1340:		    {
        -: 1341:		      //discard hand
    #####: 1342:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1343:			{
    #####: 1344:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1345:			}
        -: 1346:							
        -: 1347:		      //draw 4
    #####: 1348:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1349:			{
    #####: 1350:			  drawCard(i, state);
call    0 never executed
        -: 1351:			}
        -: 1352:		    }
        -: 1353:		}
        -: 1354:	    }
        -: 1355:				
        -: 1356:	}
    #####: 1357:}
        -: 1358://end of dominion.c
